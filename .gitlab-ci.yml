stages:
  - env_dev
  - build
  - doxygen
  - release
  
variables:
  DOCKER_IMAGE_BUILD: "${CI_REGISTRY_IMAGE}/build"
  DOCKER_IMAGE_CORE: "${CI_REGISTRY_IMAGE}"

services:
  - mongo:3.6-stretch

build_image_dev:debug:
  image: docker:stable
  stage: env_dev
  variables:
    DOCKER_DRIVER: overlay2
  tags:
    - dind
  only:
    changes:
    - utils/dockers/Dockerfile.*
    - CMakeLists.txt
    - src/CMakeLists.txt
    - .gitlab-ci.yml
  script:
    - build_docker "Dockerfile.ubuntu" "Debug"

build_image_dev:release:
  image: docker:stable
  stage: env_dev
  variables:
    DOCKER_DRIVER: overlay2
  tags:
    - dind
  only:
    changes:
    - utils/dockers/Dockerfile.ubuntu
    - ./CMakeLists.txt 
    - ./**/CMakeLists.txt 
    - .gitlab-ci.yml
  script:
    - build_docker "Dockerfile.ubuntu" "Release"

  
build_job:dev:
  image: "${DOCKER_IMAGE_BUILD}/debug:latest" # change that with sha after first run

  stage: build
  tags:
    - cpp
  script:
    - build_bot "Debug"
  artifacts:
    paths:
      - coverage.html
      - build
      - testnet/data.0.testnet

build_job:release:
  image: "${DOCKER_IMAGE_BUILD}/release:latest" # change that with sha after first run
  stage: build
  tags:
    - cpp
  script:
    - build_bot "Release"
  artifacts:
    paths:
      - build

pages:
  image: alpine
  stage: doxygen
  before_script:
    - apk update
    - apk add doxygen
    - apk add ttf-freefont graphviz
  script:
    - mkdir build && cd build && doxygen ../doc/Doxyfile
    - mv html ../public
    - mv ../doc/img ../public 

  only:
    - feaeture/109/documentation
    - feature/ledger
    - tags/build_doc
  artifacts:
    paths:
      - public

build_image_prod:release:
  image: docker:stable
  stage: release
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:stable-dind
  only:
    refs:
      - refs/tags/build_prod
      
    changes:
      - utils/dockers/Dockerfile.ubuntu
      - ./CMakeLists.txt 
      - ./**/CMakeLists.txt 
  script:
    - build_docker "Dockerfile.ubuntu" "Release"

      

.build_bot: &build_bot |
  function build_bot() {
    echo "Building in $1"
    set -ex 
    export BUILD_TYPE=$1
    mkdir build || echo k
    pwd && ls -lahrt ~/
    cd build
    cmake -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/root -DCMAKE_BUILD_TYPE=$1 -G Ninja ..
    ninja 
    mkdir /tmp/db && nohup mongod --dbpath /tmp/db & 
    sleep 5
    python3 ../utils/dockers/times3.py ctest -V
    cd .. && python3 -m gcovr -p -r . --html -o coverage.html
  }

.build_docker: &build_docker |
  function build_docker() {
    echo "Building docker image $1"
    set -ex 
    export DOCKER_FILE_NAME=$1
    export BUILD_TYPE=$2
    export IMAGE_SUFFIX=$(echo $BUILD_TYPE| tr '[:upper:]' '[:lower:]')
  
    docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    env
    docker container list -a 
    docker build -f "utils/dockers/$DOCKER_FILE_NAME" --build-arg DOCKER_BUILD_TYPE=$BUILD_TYPE -t "${DOCKER_IMAGE_BUILD}/$IMAGE_SUFFIX:latest" -t "${DOCKER_IMAGE_BUILD}/$IMAGE_SUFFIX:$CI_COMMIT_SHA" .
    docker push "${DOCKER_IMAGE_BUILD}/$IMAGE_SUFFIX:latest"
    docker push "${DOCKER_IMAGE_BUILD}/$IMAGE_SUFFIX:$CI_COMMIT_SHA"
  }
 
before_script:
  - *build_bot
  - *build_docker
