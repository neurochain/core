syntax = "proto2";

package neuro.grpcservice;

import "common.proto";
import "messages.proto";
import "rest.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

service Block {
    rpc by_id(messages.Hash) returns (messages.Block);
    rpc by_height(google.protobuf.UInt64Value) returns (messages.Block);
    rpc last(google.protobuf.UInt64Value) returns (messages.Block);
    rpc total(google.protobuf.Empty) returns (messages._NCCAmount);
    rpc subscribe(google.protobuf.Empty) returns (stream messages.Blocks);
}

service Transaction {
    rpc by_id(messages.Hash) returns (messages.Transaction);
    rpc list(messages.TransactionsFilter) returns (messages.Transactions);
    rpc total(google.protobuf.Empty) returns (messages._NCCAmount);
    rpc create(messages.CreateTransactionBody) returns (messages.Transaction);
    // TODO does it make sense to use string payload anymore ?
    rpc publish(messages.Publish) returns (google.protobuf.Empty);
    rpc subscribe(google.protobuf.Empty) returns (stream messages.Transactions);
}

service Status {
    rpc balance(messages._KeyPub) returns (messages._NCCAmount);
    rpc validate_key(messages._KeyPub) returns (google.protobuf.BoolValue);
    rpc ready(google.protobuf.Empty) returns (google.protobuf.BoolValue);
    rpc list(google.protobuf.Empty) returns (messages._Peers);
    rpc status(google.protobuf.Empty) returns (messages.Status);
}
