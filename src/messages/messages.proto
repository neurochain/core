syntax = "proto2";

package neuro.messages;

import "common.proto";

message Hello {
  required KeyPub key_pub = 1;
  optional int32 listen_port = 2;
}

message World {
  required bool accepted = 1;
  required KeyPub key_pub = 2;
  repeated Peer peers = 3;
}

message GetPeers {
}

message Peers {
  repeated Peer peers = 1;
}

message GetRoots {
  optional Hash last_known_root = 1;
  optional int32 count = 2; // ask for count last roots 
}

message Roots {
  repeated Hash roots = 1;
}

message GetBlock {
  oneof id {
    Hash hash = 1;
    uint32 height = 2;
  }
  optional int32 count = 3;
}

message Input {
  required Hash id = 1;
  required int32 output_id = 2;
  required int32 key_id = 3;
  optional Hash block_id = 4;
  optional int32 signature_id = 5;
}

message Output {
  required Hash address = 1;
  required NCCSDF value = 2;
  optional bytes data = 3;
  optional int32 output_id = 4;
}

message Signature {
  required Hash signature = 1;
  required KeyPub key_pub = 2;
}

message Transaction {
  repeated Input inputs = 1;
  repeated Output outputs = 2;
  repeated Signature signatures = 3;
  optional NCCSDF fees = 4;
  optional Hash id = 5;
}

message BlockHeader {
  optional Hash id = 1;
  required Timestamp timestamp = 2;
  required Hash previous_block_hash = 3;
  required KeyPub author = 5;
  optional int32 height = 6;
}

message Block {
  required BlockHeader header = 1;
  repeated Transaction transactions = 20;
}

message ConnectionClosed {
}

message ConnectionReady {
  required bool from_remote = 1;
}

message BodyCount {}

message Body {
  oneof body {
    Hello hello = 1;
    World world = 2;
    GetPeers get_peers = 3;
    Peers peers = 4;
    GetRoots get_roots = 5;
    Roots roots = 6;
    Transaction transaction = 7;
    GetBlock get_block = 8;
    Block block = 9;
    ConnectionClosed connection_closed = 10;
    ConnectionReady connection_ready = 11;
    BodyCount body_count = 12;
  }
}

message Header {
  required int32 version = 1;
  required Timestamp ts = 2;
  optional Hash signature = 3;
  optional int32 id = 11;
  optional int32 request_id = 12;
  optional Peer peer = 13;
}

message Message {
  optional Header header = 1;
  repeated Body bodies = 20;
}
